#!/usr/bin/env node

const logger = require("log4js").getLogger()
const currentFileName = require('path').basename(__filename)

const assert = require('assert')
const PORT = process.env.PORT || 3001;

async function initServer() {
  // sleep for 1s to init something
  await new Promise((resolve) => {
    setTimeout(resolve, 1000);
  });

  const app = require("../app");
  const server = app.listen(PORT, function () {
    logger.info(`Webserver is ready and listening on port ${PORT}`);
    logger.info(`Running mode: ${process.env.NODE_ENV}`);
  });

  // if the Promise is rejected (forgot to catch after promise.then()) this will catch it
  process.on('unhandledRejection', (err) => {
    throw err; // then pass to uncaughtException
  });

  process.on('uncaughtException', err => {
    logger.error(`[${currentFileName}]: ----- Unexpected exception: start -----`)
    try {
      logger.error(`[${currentFileName}]: ${JSON.stringify(err)}`)
    } catch (error){
      logger.error(`[${currentFileName}]: ${err}`)
    }
    logger.error(err)
    logger.error(`[${currentFileName}]: ----- Unexpected exception: end -----\n\n`)
  })

  // quit on ctrl-c when running docker in terminal
  process.on('SIGINT', function onSigint () {
    logger.info('Got SIGINT (aka ctrl-c in docker). Graceful shutdown ', new Date().toISOString());
    shutdown();
  });

  // quit properly on docker stop
  process.on('SIGTERM', function onSigterm () {
    logger.info('Got SIGTERM (docker container stop). Graceful shutdown ', new Date().toISOString());
    shutdown();
  })

  // process unhandled promise rejection
  process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
    if (process.env.NODE_ENV !== 'production') {
      assert.fail('There is an unhandled rejection!');
    }
  });

  let sockets = {}, nextSocketId = 0;
  server.on('connection', function (socket) {
    const socketId = nextSocketId++;
    sockets[socketId] = socket;

    socket.once('close', function() {
      delete sockets[socketId];
    });
  });

  // shut down server
  function shutdown() {
    waitForSocketsToClose(10);

    server.close(function onServerClosed (err) {
      if (err) {
        console.error(err);
        process.exitCode = 1;
      }
      process.exit();
    });
  }

  function waitForSocketsToClose(counter) {
    if (counter > 0) {
      logger.info(`Waiting ${counter} more ${counter === 1 ? 'seconds' : 'second'} for all connections to close...`);
      return setTimeout(waitForSocketsToClose, 1000, counter - 1);
    }

    logger.info("Forcing all connections to close now");
    for (var socketId in sockets) {
      sockets[socketId].destroy();
    }
  }
}

initServer();
